name: Build and Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # x86_64 builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: code_prompt
            asset_name: code_prompt-linux-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: code_prompt
            asset_name: code_prompt-macos-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: code_prompt.exe
            asset_name: code_prompt-windows-amd64.exe

          # ARM64 builds
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: code_prompt
            asset_name: code_prompt-linux-arm64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: code_prompt
            asset_name: code_prompt-macos-arm64

          # RISC-V builds
          - os: ubuntu-latest
            target: riscv64gc-unknown-linux-gnu
            artifact_name: code_prompt
            asset_name: code_prompt-linux-riscv64

    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Extract version from tag
      - name: Extract version from tag
        id: get_version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Install cross-compilation dependencies for Linux ARM64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install cross-compilation dependencies for RISC-V
        if: matrix.target == 'riscv64gc-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-riscv64-linux-gnu

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare asset
        shell: bash
        run: |
          cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "code_prompt-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          files: code_prompt-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}
          draft: false
          prerelease: false
